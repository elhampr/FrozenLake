import gym
import torch
import torch.nn as nn
import torch.optim as optim
from tensorboardX import SummaryWriter

import numpy
from collections import namedtuple
import random

HIDDEN_SIZE = 128
BATCH_SIZE = 100   #tweaked
PERCENTILE = 30    #tweaked
GAMMA = 0.9        #tweaked

Episode = namedtuple('Episode', field_names=['reward', 'steps'])
Episode_Steps = namedtuple('Episode_Steps', field_names=['observation', 'action'])


class DiscreteOneHotWrapper(gym.ObservationWrapper):
    def __init__(self, env):
        super(DiscreteOneHotWrapper,self).__init__(env)
        assert isinstance(env.observation_space, gym.spaces.Discrete)

        shape = (env.observation_space.n,)
        self.observation_space = gym.spaces.Box(0.0, 1.0, shape, dtype=numpy.float32)

    def observation(self, observation):
        res = numpy.copy(self.observation_space.low)
        res[observation] = 1.0
        return res

class Net(nn.Module):
    def __init__(self, num_obs, num_hidden, num_act):
        super(Net, self).__init__()
        self.pipe = nn.Sequential(
            nn.Linear(num_obs,num_hidden),
            nn.ReLU(),
            nn.Linear(num_hidden, num_act)
        )
    
    def forward(self, x):
        return self.pipe(x)

def iterate_batches(env_problem, env_net, num_batch):
    
    batch = []
    episode_reward = 0.0
    episode_step = []

    obs = env_problem.reset()

    sm = nn.Softmax(dim=1)                       #Due to more numerically stable calculations we use softmax outside the net class
    
    while True:
        obs_vtf = torch.FloatTensor([obs])       #Both network and softmax use and outputs tensor, BUT GYM ENVIORNMENT USE NUMPY
        act_prob_vtf = sm(env_net(obs_vtf))
        act_prob = act_prob_vtf.data.numpy()[0]  
        act_option_selected = numpy.random.choice(len(act_prob), p=act_prob)

        next_obs, reward, is_done, _ = env_problem.step(act_option_selected)  
        episode_reward += reward

        episode_step.append(Episode_Steps(observation = obs, action = act_option_selected))

        if is_done:
            batch.append(Episode(reward=episode_reward, steps=episode_step))
            
            episode_reward = 0.0
            episode_step = []

            next_obs = env_problem.reset()
            
            if len(batch) == num_batch:
                yield batch
                batch = []

        obs = next_obs    

def filter_batch(batch, percentile):
    filter_fun = lambda s: s.reward * (GAMMA ** len(s.steps))   #tweaked
    disc_rewards = list(map(filter_fun, batch))

    reward_bound = numpy.percentile(disc_rewards, percentile)
    #reward_mean = float(numpy.mean(rewards))

    train_obs = []
    train_acts = []
    elite_batch = []

    for reward, example in zip(disc_rewards,batch):
        if reward > reward_bound:
            train_obs.extend(map(lambda s: s.observation, example.steps))
            train_acts.extend(map(lambda s: s.action, example.steps))
            elite_batch.append(example)

    train_acts_vtf = torch.LongTensor(train_acts)    #64 BIT INT SIGNED
    train_obs_vtf = torch.FloatTensor(train_obs)     #32 BIT FLOAT
    return elite_batch, train_obs_vtf, train_acts_vtf, reward_bound


if __name__ == "__main__":
    random.seed(12345)
    env = DiscreteOneHotWrapper(gym.make("FrozenLake-v0"))

    obs_size = env.observation_space.shape[0]
    act_size = env.action_space.n

    net = Net(obs_size, HIDDEN_SIZE, act_size)

    obj_func = nn.CrossEntropyLoss()
    optimizer = optim.Adam(net.parameters(), lr=0.01)

    writer = SummaryWriter(comment="-frozenlake-naive")

    elite_batch = []

    for iter_no, iter_batch in enumerate(iterate_batches(env, net, BATCH_SIZE)):

        rw_m = float(numpy.mean(list(map(lambda s: s.reward, iter_batch))))  #still uses whole sample rewards to take the mean not only the elite
        elite_batch, obs, acts, rw_b = filter_batch(elite_batch+iter_batch, PERCENTILE)   #since in this problem the successful episode is rare we wat to keep elite episodes in other iters too
        
        if not elite_batch:      #???
            continue
        
        elite_batch = elite_batch[-500:]   #???

        optimizer.zero_grad()
        acts_vtf = net(obs)    #here the acts are scores not action option while those from batch file are action option themselves
        loss_vtf = obj_func(acts_vtf, acts)
        loss_vtf.backward()
        optimizer.step()

        print("%d: loss=%.3f, mean_reward=%.1f, bound_reward=%.1f,  batch=%d" %(iter_no, loss_vtf.item(), rw_m, rw_b, len(elite_batch)))

        writer.add_scalar("loss", loss_vtf.item(), iter_no)
        writer.add_scalar("reward mean", rw_m, iter_no)
        writer.add_scalar("reward boundry", rw_b, iter_no)

        if rw_m > 0.8:
            print("Solved!")
            break

    writer.close()




